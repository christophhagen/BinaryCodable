// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Test.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct SimpleStruct {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var integer64: Int64 = 0

  var text: String = String()

  var data: Data = Data()

  var intArray: [UInt32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension SimpleStruct: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension SimpleStruct: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SimpleStruct"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "integer64"),
    4: .same(proto: "text"),
    6: .same(proto: "data"),
    8: .same(proto: "intArray"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularSInt64Field(value: &self.integer64) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.text) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.data) }()
      case 8: try { try decoder.decodeRepeatedUInt32Field(value: &self.intArray) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.integer64 != 0 {
      try visitor.visitSingularSInt64Field(value: self.integer64, fieldNumber: 2)
    }
    if !self.text.isEmpty {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 4)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 6)
    }
    if !self.intArray.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.intArray, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SimpleStruct, rhs: SimpleStruct) -> Bool {
    if lhs.integer64 != rhs.integer64 {return false}
    if lhs.text != rhs.text {return false}
    if lhs.data != rhs.data {return false}
    if lhs.intArray != rhs.intArray {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
